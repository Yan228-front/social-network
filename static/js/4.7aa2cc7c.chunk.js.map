{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsConteiner.jsx","components/Profile/MyPosts/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/MyPosts/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileConteiner.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Post","className","classes","item","src","alt","message","likesCount","MyPostForm","postsElement","posts","map","p","newPostElement","createRef","formik","useFormik","initialValues","post","onSubmit","values","handleSubmit","htmlFor","name","type","onChange","text","current","value","updateNewPostText","ref","newPostText","onClick","addPost","MyPostsConteiner","profilePage","dispatch","action","updateNewPostActionCreator","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","e","target","ProfileInfo","profile","descriptoinBlock","photos","large","profilePhoto","fullName","Preloader","Profile","ProfileConteiner","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/4.7aa2cc7c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Redirect to={\"/login\"} />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__17OD_\",\"posts\":\"MyPosts_posts__2hv3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2kT32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptoinBlock\":\"ProfileInfo_descriptoinBlock__2VrV0\",\"profilePhoto\":\"ProfileInfo_profilePhoto__1CtFx\"};","import classes from \"./Post.module.css\";\r\n\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={classes.item}>\r\n      <img\r\n        src='https://i.ytimg.com/vi/CtI_D76BcV0/maxresdefault.jpg'\r\n        alt='sad'\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span>like</span> {props.likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import classes from \"./MyPosts.module.css\";\r\nimport Post from \"./Posts/Post\";\r\nimport React from \"react\";\r\nimport { useFormik } from \"formik\";\r\n\r\nconst MyPosts = (props) => {\r\n  // let postsElement = props.posts.map((p) => (\r\n  //   <Post message={p.message} likesCount={p.likesCount} />\r\n  // ));\r\n\r\n  // let newPostElement = React.createRef();\r\n\r\n  // let onAddPost = () => {\r\n  //   props.addPost();\r\n  // };\r\n\r\n  // let onPostChange = () => {\r\n  //   let text = newPostElement.current.value;\r\n  //   props.updateNewPostText(text);\r\n  // };\r\n\r\n  return (\r\n    <div className={classes.postBlock}>\r\n      <MyPostForm />\r\n      {/* <h3>My post</h3>\r\n\r\n      <div>\r\n        <textarea\r\n          onChange={onPostChange}\r\n          ref={newPostElement}\r\n          value={props.newPostText}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <button onClick={onAddPost}>Add post</button>\r\n      </div>\r\n\r\n      <div className={classes.posts}>{postsElement}</div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MyPostForm = (props) => {\r\n  let postsElement = props.posts.map((p) => (\r\n    <Post message={p.message} likesCount={p.likesCount} />\r\n  ));\r\n\r\n  let newPostElement = React.createRef();\r\n\r\n  let onAddPost = () => {\r\n    props.addPost();\r\n  };\r\n\r\n  let onPostChange = () => {\r\n    let text = newPostElement.current.value;\r\n    props.updateNewPostText(text);\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      post: \"\",\r\n    },\r\n    onSubmit: (values) => {\r\n      //alert(JSON.stringify(values, null, 2));\r\n      //<div className={classes.posts}>{postsElement}</div>\r\n    },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <div>\r\n        <label htmlFor='post'>My post</label>\r\n      </div>\r\n      <textarea\r\n        name='post'\r\n        type='text'\r\n        onChange={onPostChange}\r\n        ref={newPostElement}\r\n        value={props.newPostText}\r\n      />\r\n\r\n      <button onClick={onAddPost}>Add post</button>\r\n      <div className={classes.posts}>{postsElement}</div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MyPostForm;\r\n","import { connect } from \"react-redux\";\r\nimport {\r\n  addPostActionCreator,\r\n  updateNewPostActionCreator,\r\n} from \"../../../redux/profile-reducer\";\r\nimport MyPostForm from \"./MyPosts\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateNewPostText: (text) => {\r\n      let action = updateNewPostActionCreator(text);\r\n      dispatch(action);\r\n    },\r\n    addPost: () => {\r\n      dispatch(addPostActionCreator());\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostsConteiner = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(MyPostForm);\r\n\r\nexport default MyPostsConteiner;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>\r\n            {props.status || \"-----\"}\r\n          </span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import Preloader from \"../../../../common/Preloader/Preloader\";\r\nimport classes from \"./ProfileInfo.module.css\";\r\n\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = (props) => {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* <div>\r\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRP9KB8nZTvF-h0eWWDnVT7n7gTev6M3hrVXcr15AsyxDuC2COqCABVuJMg8BQXJVcScIs&usqp=CAU'></img>\r\n      </div> */}\r\n      <div className={classes.descriptoinBlock}>\r\n        <img\r\n          src={props.profile.photos.large}\r\n          className={classes.profilePhoto}\r\n        />\r\n\r\n        <div>\r\n          {props.profile.fullName}\r\n          <ProfileStatusWithHooks\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import MyPostsConteiner from \"./MyPosts/MyPostsConteiner\";\r\nimport ProfileInfo from \"./MyPosts/ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n\r\n      <MyPostsConteiner />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  updateStatus,\r\n} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\n\r\nclass ProfileConteiner extends React.Component {\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n  withRouter,\r\n  withAuthRedirect\r\n)(ProfileConteiner);\r\n"],"sourceRoot":""}