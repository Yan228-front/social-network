{"version":3,"sources":["hoc/withAuthRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsConteiner.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","classes","dialog","src","id","name","Message","message","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","value","onChange","e","body","target","updateNewMessageBody","placeholder","onClick","sendMessage","compose","dispatch","updateNewMessageBodyCreator","sendMessageCreator"],"mappings":"4NAIIA,EAA6B,SAACC,GAChC,MAAO,CACLC,OAAQD,EAAME,KAAKD,SAIVE,EAAmB,SAACC,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAKC,MAAMN,OAGT,cAACG,EAAD,eAAeE,KAAKC,QAFlB,cAAC,IAAD,CAAUC,GAAI,eAJkB,GACbC,IAAML,WAatC,OAJqCM,YAAQX,EAARW,CACnCL,K,oBCpBJM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mJCWnKC,EATI,SAACN,GAClB,OACE,sBAAKO,UAAWC,IAAQC,OAAxB,UACE,qBAAKC,IAAI,4EACT,cAAC,IAAD,CAAST,GAAI,YAAcD,EAAMW,GAAjC,SAAsCX,EAAMY,W,kBCInCC,G,KARC,SAACb,GACf,OACE,8BACE,qBAAKO,UAAWC,IAAQC,OAAxB,SAAiCT,EAAMc,c,OC6G9BC,EA7GC,SAACf,GACf,IAAIP,EAAQO,EAAMgB,YAEdC,EAAkBxB,EAAMyB,QAAQC,KAAI,SAACC,GAAD,OACtC,cAAC,EAAD,CAAYR,KAAMQ,EAAER,KAAiBD,GAAIS,EAAET,IAAZS,EAAET,OAE/BU,EAAmB5B,EAAM6B,SAASH,KAAI,SAACI,GAAD,OACxC,cAAC,EAAD,CAAST,QAASS,EAAET,SAAcS,EAAEZ,OAElCa,EAAiB/B,EAAM+B,eAW3B,OAAKxB,EAAMN,OAMT,sBAAKa,UAAWC,IAAQU,QAAxB,UACE,qBAAKX,UAAWC,IAAQiB,aAAxB,SAAuCR,IAEvC,sBAAKV,UAAWC,IAAQc,SAAxB,UACE,8BAAMD,IACN,gCACE,8BACE,0BACEK,MAAOF,EACPG,SApBa,SAACC,GACxB,IAAIC,EAAOD,EAAEE,OAAOJ,MACpB1B,EAAM+B,qBAAqBF,IAmBjBG,YAAY,wBAGhB,8BACE,wBAAQC,QA7BO,WACvBjC,EAAMkC,eA4BE,6BAnBD,cAAC,IAAD,CAAUjC,GAAI,Y,yBCDVkC,sBACbhC,aAlBoB,SAACV,GACrB,MAAO,CACLuB,YAAavB,EAAMuB,gBAIE,SAACoB,GACxB,MAAO,CACLL,qBAAsB,SAACF,GACrBO,EAASC,YAA4BR,KAEvCK,YAAa,WACXE,EAASE,oBAOb1C,IAFauC,CAGbpB","file":"static/js/3.28a0b27d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) {\r\n        return <Redirect to={\"/login\"} />;\r\n      }\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3WRH5\",\"dialogsItems\":\"Dialogs_dialogsItems__2YZN8\",\"dialog\":\"Dialogs_dialog__1lcW0\",\"messages\":\"Dialogs_messages__2B2Pg\",\"massage\":\"Dialogs_massage__2YlWh\"};","import classes from \"./DialogItem.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={classes.dialog}>\r\n      <img src=\"https://www.meme-arsenal.com/memes/33621cce7259d40c4340cee244b8f73a.jpg\"></img>\r\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import classes from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n    <div>\r\n      <div className={classes.dialog}>{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} />\r\n  ));\r\n  let newMessageBody = state.newMessageBody;\r\n\r\n  let onSendMessageClick = () => {\r\n    props.sendMessage();\r\n  };\r\n\r\n  let onNewMessageChange = (e) => {\r\n    let body = e.target.value;\r\n    props.updateNewMessageBody(body);\r\n  };\r\n\r\n  if (!props.isAuth) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    \r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n\r\n      <div className={classes.messages}>\r\n        <div>{messagesElements}</div>\r\n        <div>\r\n          <div>\r\n            <textarea\r\n              value={newMessageBody}\r\n              onChange={onNewMessageChange}\r\n              placeholder='Enter new massage'\r\n            ></textarea>\r\n          </div>\r\n          <div>\r\n            <button onClick={onSendMessageClick}>Send</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// const DialogsForm = (props) => {\r\n//   let state = props.dialogsPage;\r\n\r\n//   let dialogsElements = state.dialogs.map((d) => (\r\n//     <DialogItem name={d.name} key={d.id} id={d.id} />\r\n//   ));\r\n//   let messagesElements = state.messages.map((m) => (\r\n//     <Message message={m.message} key={m.id} />\r\n//   ));\r\n//   let newMessageBody = state.newMessageBody;\r\n\r\n//   let onSendMessageClick = () => {\r\n//     props.sendMessage();\r\n//   };\r\n\r\n//   let onNewMessageChange = (e) => {\r\n//     let body = e.target.value;\r\n//     props.updateNewMessageBody(body);\r\n//   };\r\n\r\n//   if (!props.isAuth) {\r\n//     return <Redirect to={\"/login\"} />;\r\n//   }\r\n\r\n//   const formik = useFormik({\r\n//     initialValues: {\r\n//       message: \"\",\r\n//     },\r\n//     onSubmit: (values) => {\r\n//       //alert(JSON.stringify(values, null, 2));\r\n//       //<div className={classes.posts}>{postsElement}</div>\r\n//     },\r\n//   });\r\n\r\n//   return (\r\n//     <form onSubmit={formik.handleSubmit}>\r\n//       <div className={classes.dialogs}>\r\n//         <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n\r\n//         <div className={classes.messages}>\r\n//           <div>{messagesElements}</div>\r\n//           <div>\r\n//             <div>\r\n//               <textarea\r\n//                 name='message'\r\n//                 type='text'\r\n//                 value={newMessageBody}\r\n//                 onChange={onNewMessageChange}\r\n//                 placeholder='Enter new massage'\r\n//               />\r\n//             </div>\r\n//             <div>\r\n//               <button onClick={onSendMessageClick}>Send</button>\r\n//             </div>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </form>\r\n//   );\r\n// };\r\n\r\nexport default Dialogs;\r\n","import {\r\n  sendMessageCreator,\r\n  updateNewMessageBodyCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateNewMessageBody: (body) => {\r\n      dispatch(updateNewMessageBodyCreator(body));\r\n    },\r\n    sendMessage: () => {\r\n      dispatch(sendMessageCreator());\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}